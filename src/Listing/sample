const express = require('express');
const multer = require('multer');
const path = require('path');
const app = express();
const PORT = 3001;

// Set storage engine
const storage = multer.diskStorage({
  destination: './uploads/',
  filename: function (req, file, cb) {
    cb(null, `${Date.now()}-${file.originalname}`);
  },
});

// Initialize upload
const upload = multer({
  storage: storage,
  limits: { fileSize: 1000000 }, // limit file size to 1MB
  fileFilter: function (req, file, cb) {
    checkFileType(file, cb);
  },
}).array('images', 10); // allow up to 10 images

// Check file type
function checkFileType(file, cb) {
  const filetypes = /jpeg|jpg|png/;
  const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
  const mimetype = filetypes.test(file.mimetype);

  if (mimetype && extname) {
    return cb(null, true);
  } else {
    cb('Error: Images Only!');
  }
}

// Upload endpoint
app.post('/upload', (req, res) => {
  upload(req, res, (err) => {
    if (err) {
      return res.status(400).json({ success: false, message: err });
    }

    if (req.files === undefined) {
      return res.status(400).json({ success: false, message: 'No file selected' });
    }

    const imageUrls = req.files.map(file => `/uploads/${file.filename}`);
    res.status(200).json({ success: true, imageUrls });
  });
});

app.use('/uploads', express.static('uploads'));

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
Update the UploadImage component to handle image uploads:

Update UploadImage.js Component:
import React, { useState } from 'react';
import axios from 'axios';

const UploadImage = ({ formData, setFormData }) => {
  const [images, setImages] = useState([]);
  const [uploading, setUploading] = useState(false);

  const handleImageChange = (e) => {
    setImages([...e.target.files]);
  };

  const handleUpload = async () => {
    const data = new FormData();
    images.forEach((image) => data.append('images', image));

    setUploading(true);
    try {
      const response = await axios.post('http://localhost:3001/upload', data, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      if (response.data.success) {
        setFormData({ ...formData, imageUrls: response.data.imageUrls });
        setUploading(false);
      }
    } catch (error) {
      console.error('Error uploading images:', error);
      setUploading(false);
    }
  };

  return (
    <div>
      <input type="file" multiple onChange={handleImageChange} />
      <button onClick={handleUpload} disabled={uploading}>
        {uploading ? 'Uploading...' : 'Upload Images'}
      </button>
    </div>
  );
};

export default UploadImage;

To integrate image uploading using Multer with the provided React code, you need a backend setup to handle the image upload and a frontend setup to send the image files to the backend. Here's a step-by-step guide:

Backend Setup (Node.js and Express with Multer)
Install Dependencies:
bash
Copy code
npm install express multer
Create a Backend Server (server.js):
javascript
Copy code
const express = require('express');
const multer = require('multer');
const path = require('path');
const app = express();
const PORT = 3001;

// Set storage engine
const storage = multer.diskStorage({
  destination: './uploads/',
  filename: function (req, file, cb) {
    cb(null, `${Date.now()}-${file.originalname}`);
  },
});

// Initialize upload
const upload = multer({
  storage: storage,
  limits: { fileSize: 1000000 }, // limit file size to 1MB
  fileFilter: function (req, file, cb) {
    checkFileType(file, cb);
  },
}).array('images', 10); // allow up to 10 images

// Check file type
function checkFileType(file, cb) {
  const filetypes = /jpeg|jpg|png/;
  const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
  const mimetype = filetypes.test(file.mimetype);

  if (mimetype && extname) {
    return cb(null, true);
  } else {
    cb('Error: Images Only!');
  }
}

// Upload endpoint
app.post('/upload', (req, res) => {
  upload(req, res, (err) => {
    if (err) {
      return res.status(400).json({ success: false, message: err });
    }

    if (req.files === undefined) {
      return res.status(400).json({ success: false, message: 'No file selected' });
    }

    const imageUrls = req.files.map(file => `/uploads/${file.filename}`);
    res.status(200).json({ success: true, imageUrls });
  });
});

app.use('/uploads', express.static('uploads'));

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
Frontend Setup (React)
Update the UploadImage component to handle image uploads:

Update UploadImage.js Component:
javascript
Copy code
import React, { useState } from 'react';
import axios from 'axios';

const UploadImage = ({ formData, setFormData }) => {
  const [images, setImages] = useState([]);
  const [uploading, setUploading] = useState(false);

  const handleImageChange = (e) => {
    setImages([...e.target.files]);
  };

  const handleUpload = async () => {
    const data = new FormData();
    images.forEach((image) => data.append('images', image));

    setUploading(true);
    try {
      const response = await axios.post('http://localhost:3001/upload', data, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      if (response.data.success) {
        setFormData({ ...formData, imageUrls: response.data.imageUrls });
        setUploading(false);
      }
    } catch (error) {
      console.error('Error uploading images:', error);
      setUploading(false);
    }
  };

  return (
    <div>
      <input type="file" multiple onChange={handleImageChange} />
      <button onClick={handleUpload} disabled={uploading}>
        {uploading ? 'Uploading...' : 'Upload Images'}
      </button>
    </div>
  );
};

export default UploadImage;
Integrate UploadImage in CreateListing.js:
You already have this part in your existing code. Ensure the UploadImage component is used correctly to handle the image upload process.

Full CreateListing.js:
Make sure UploadImage component is imported and used within the CreateListing component.
import { useState } from "react";
import UploadImage from "./UploadImage";
import axios from "axios";
import { toast } from "react-toastify";
import { useSelector } from "react-redux";

function CreateListing() {
  const token = useSelector((state) => state.user.token);
  const currentUser = useSelector((state) => state.user.currentUser);

  const [formData, setFormData] = useState({
    name: "",
    description: "",
    address: "",
    type: "rent",
    parking: false,
    furnished: false,
    offer: false,
    bedrooms: 1,
    bathrooms: 1,
    regularPrice: 50,
    discountPrice: 0,
    imageUrls: [],
  });

  const [error, setError] = useState(false);
  const [loading, setLoading] = useState(false);

  const handleChange = (e) => {
    if (e.target.id === 'sale' || e.target.id === 'rent') {
      setFormData({ ...formData, type: e.target.id });
    }
    if (e.target.id === 'parking' || e.target.id === 'furnished' || e.target.id === 'offer') {
      setFormData({ ...formData, [e.target.id]: e.target.checked });
    }
    if (
      e.target.type === "number" ||
      e.target.type === "text" ||
      e.target.type === "textarea"
    ) {
      setFormData({ ...formData, [e.target.id]: e.target.value });
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      if (formData.imageUrls.length < 1) {
        return setError("You must upload at least one image");
      }
      if (+formData.regularPrice < +formData.discountPrice) {
        return setError("Discount price must be lower than regular price");
      }
      setLoading(true);
      setError(false);
      const { data } = await axios.post(
        "http://localhost:3001/backend/createlisting/create",
        { ...formData, userRef: currentUser._id },
        {
          headers: {
            Authorization: `Bearer ${token}`,
            Accept: "application/json",
          },
        }
      );

      if (data.success) {
        toast.success("Successfully created listing");
        setLoading(false);
      } else {
        toast.error(data.err_msg);
        setError(data.message);
      }
    } catch (error) {
      setError(error.message);
      setLoading(false);
    }
  };

  return (
    <div className="p-3 max-w-4xl mx-auto">
      <h1 className="text-3xl font-semibold text-center my-7 text-blue-300">
        Create a Listing
      </h1>
      <form className="flex flex-col sm:flex-row gap-4 " onSubmit={handleSubmit}>
        <div className="flex flex-col gap-4 flex-1">
          <input
            type="text"
            placeholder="Name"
            className="border p-3 rounded-lg"
            id="name"
            name="name"
            maxLength="62"
            minLength="5"
            required
            value={formData.name}
            onChange={handleChange}
          />
          <textarea
            type="text"
            placeholder="Description"
            className="border p-3 rounded-lg"
            id="description"
            name="description"
            value={formData.description}
            onChange={handleChange}
            required
          />
          <textarea
            type="text"
            placeholder="Address"
            className="border p-3 rounded-lg"
            id="address"
            name="address"
            value={formData.address}
            onChange={handleChange}
            required
          />
          <div className="flex gap-6 flex-wrap">
            <div className="flex gap-2">
              <input
                type="checkbox"
                id="sale"
                className="w-5"
                checked={formData.type === "sale"}
                onChange={handleChange}
              />
              <span>Sell</span>
            </div>
            <div className="flex gap-2">
              <input
                type="checkbox"
                id="rent"
                className="w-5"
                checked={formData.type === "rent"}
                onChange={handleChange}
              />
              <span>Rent</span>
            </div>
            <div className="flex gap-2">
              <input
                type="checkbox"
                name="parking"
                id="parking"
                className="w-5"
                checked={formData.parking}
                onChange={handleChange}
              />
              <span>Parking spot</span>
            </div>
            <div className="flex gap-2">
              <input
                type="checkbox"
                name="furnished"
                id="furnished"
                className="w-5"
                checked={formData.furnished}
                onChange={handleChange}
              />
              <span>Furnished</span>
            </div>
            <div className="flex gap-2">
              <input
                type="checkbox"
                name="offer"
                id="offer"
                className="w-5"
                checked={formData.offer}
                onChange={handleChange}
              />
              <span>Offer</span>
            </div>
          </div>
          <div className="flex gap-6 flex-wrap">
            <div className="flex gap-2 items-center">
              <input
                type="number"
                id="bedrooms"
                name="bedrooms"
                className="p-3 border border-gray-300 rounded-lg w-28 "
                value={formData.bedrooms}
                onChange={handleChange}
                min="1"
                max="10"
                required
              />
              <p>Beds</p>
            </div>
            <div className="flex gap-2 items-center">
              <input
                type="number"
                id="bathrooms"
                name="bathrooms"
                className="p-3 border border-gray-300 rounded-lg w-28"
                value={formData.bathrooms}
                onChange={handleChange}
                min="1"
                max="10"
                required
              />
              <p>Baths</p>
            </div>
            <div className="flex gap-2 items-center">
              <input
                type="number"
                id="regularPrice"
                name="regularPrice"
                value={formData.regularPrice}
                onChange={handleChange}
                min="50"
                max="10000000"
                required
                className="p-3 border border-gray-300 rounded-lg w-28 "
              />
              <div>
                <p>Regular Price</p>
                {formData.type === "rent" && (
                  <span className="text-sm">(&#8377; /month)</span>
                )}
              </div>
            </div>
            {formData.offer && (
              <div className="flex gap-2 items-center">
                <input
                  type="number"
                  id="discountPrice"
                  name="discountPrice"
                  min="0"
                  max="10000000"
                  required
                  className="p-3 border border-gray-300 rounded-lg w-28 "
                  value={formData.discountPrice}
                  onChange={handleChange}
                />
                <div>
                  <p>Discount Price</p>
                  {formData.type === "rent" && (
                    <span className="text-sm">(&#8377; /month)</span>
                  )}
                </div>
              </div>
            )}
          </div>
        </div>
        <div className="flex flex-1 flex-col gap-4 ms-4">
          <UploadImage formData={formData} setFormData={setFormData} />
          <button
            type="submit"
            className="p-3 bg-slate-700 text-white rounded-lg uppercase hover:opacity-95 disabled:opacity-80"
          >
            {loading ? (
              <i className="fa-solid fa-spinner animate-spin"></i>
            ) : (
              "Create Listing"
            )}
          </button>
          <p className="text-sm text-red-600">{error}</p>
        </div>
      </form>
    </div>
  );
}

export default CreateListing;

